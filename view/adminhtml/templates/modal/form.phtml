<?php declare(strict_types=1);
/**
 * Copyright © Ronan Guérin. All rights reserved.
 * See COPYING.txt for license details.
 */

/** @var \Ronangr1\AddFakeTextButton\Block\Adminhtml\Modal\Form $block */
/** @var \Magento\Framework\Escaper $escaper */

?>

<div x-data="{isAddTitleActive: false, isParagraphActive: false}">
    <form x-data="modalForm()" @submit.prevent="generateFakeText">
        <div x-text="formMessage" x-show="formMessage.length"></div>
        <fieldset class="fieldset">
            <div class="mb-10">
                <label class="text-2xl">
                    <input type="checkbox" class="h-8 w-8 rounded-full shadow" value="" name="add_title"
                           @click="isAddTitleActive = ! isAddTitleActive" x-model="formData.title">
                    <span class="ml-2 text-2xl"><?= __('Add a title') ?></span>
                </label>
                <label class="block mt-5" x-show="isAddTitleActive">
                    <input type="text" class="rounded-lg border-gray-200 w-full p-4 text-2xl" value="" x-model="title"
                           readonly>
                </label>
            </div>
            <div>
                <label class="text-2xl">
                    <input type="checkbox" value="" class="h-8 w-8 rounded-full shadow" name="add_text"
                           @click="isParagraphActive = ! isParagraphActive" x-model="formData.text">
                    <span class="ml-2 text-2xl"><?= __('Add a text') ?></span>
                </label>
                <label class="block mt-5" x-show="isParagraphActive">
                    <textarea class="rounded-lg border-gray-200 w-full p-4 text-2xl" x-model="text" readonly></textarea>
                </label>
            </div>
            <div class="mt-10 pt-10 flex justify-between" x-show="isParagraphActive || isAddTitleActive">
                <div class="generate">
                    <button :disabled="formLoading"
                            class="text-2xl bg-blue-700 text-white font-semibold px-6 py-4 leading-relaxed rounded-lg border-0 focus:outline-none focus:ring focus:border-blue-700"
                            x-text="buttonText"></button>
                </div>
                <div class="insert" x-show="generated">
                    <button
                        class="text-2xl bg-green-600 text-white font-semibold px-6 py-4 leading-relaxed rounded-lg border-0 focus:outline-none focus:ring focus:border-green-600"
                        @click="insertFakeText; isModalOpen=false"><?= __('Insert') ?></button>
                </div>
            </div>
        </fieldset>
    </form>
</div>

<script>
    function modalForm() {
        return {
            formData: {
                title: "",
                text: "",
            },
            formUrl: "<?= $escaper->escapeUrl($block->getUrlAction()) ?>",
            formLoading: false,
            formMessage: "",
            title: "",
            text: "",
            generated: false,
            buttonText: "<?= __('Generate') ?>",
            generateFakeText() {
                const defaultButtonText = this.buttonText
                this.buttonText = "<?= __('Generating...') ?>";
                this.formLoading = true
                fetch(this.formUrl, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "X-Requested-With": "XMLHttpRequest"
                    },
                    body: JSON.stringify(this.formData),
                }).then((res) => {
                    if (res.status >= 200 && res.status < 300) {
                        return res.json()
                    } else {
                        throw new Error();
                    }
                }).then((data) => {
                    if (typeof data.title !== "undefined") {
                        this.title = data.title.charAt(0).toUpperCase() + data.title.slice(1)
                        this.title = "<h2>" + this.title + "</h2>"
                    }
                    if (typeof data.text !== "undefined") {
                        this.text = "<p>" + data.text + "</p>"
                    }
                }).catch(() => {
                    this.formMessage = "Something went wrong.";
                }).finally(() => {
                    this.formLoading = false;
                    this.formMessage = "";
                    this.generated = true;
                    this.buttonText = defaultButtonText
                });
            },

            insertFakeText(e) {
                e.preventDefault()
                const textarea = document.querySelector('[name="content"]');
                let textareaContent = textarea.value
                if (typeof this.title !== "undefined" || this.title === "") {
                    textareaContent += "\n" + this.title
                }
                if (typeof this.text !== "undefined" || this.title === "") {
                    textareaContent += "\n" + this.text
                }
                textarea.value = textareaContent
            }
        }
    }
</script>
